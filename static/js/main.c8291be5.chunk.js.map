{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","robots.js","containters/App.js","serviceWorker.js","index.js"],"names":["Card","props","state","this","robot","id","name","username","email","className","src","alt","Component","CardList","robots","map","key","SearchBox","searchBoxChange","onInput","type","placeholder","Scroll","style","overflowY","border","height","children","ErrorBoundary","hasError","info","err","setState","App","SearchBoxChange","event","search","target","value","fetch","then","res","json","data","catch","console","log","filteredRobots","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c8291be5.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Card extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state ={}\r\n    }\r\n\r\n    render() {\r\n        const { id,name,username,email } = this.props.robot\r\n        return (\r\n            \r\n            <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n                <img src={`https://robohash.org/${id}?set=set4&size=200x200`} alt={name+\"'s image\"}/>\r\n                <div >\r\n                    <h2> {username} </h2>\r\n                    <p> {email} </p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport Card from './Card'\r\n\r\nexport default function CardList({robots}) {\r\n    // if(1){\r\n    //     throw new Error('not good');\r\n    // }\r\n    return (\r\n        robots.map(robot=><Card key={robot.id} robot={robot} />)\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function SearchBox({searchBoxChange})  {\r\n\r\n     return (\r\n        <div>\r\n            <input onInput={searchBoxChange} className=\" pa2 ba1 b--green bg-lightest-blue \" type=\"search\" name=\"search\" id=\"search\" placeholder=\"Search Box\"/>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Scroll(props) {\r\n    return (\r\n        <div style={{ overflowY:'scroll', border:'5px solid black', height:'800px' }}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class ErrorBoundary extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            hasError: false,\r\n            info:''\r\n        }\r\n    }\r\n\r\n    componentDidCatch(err,info){\r\n        this.setState({hasError:err,info:info})\r\n    }\r\n    render() {\r\n        const { hasError} = this.state;\r\n        return  hasError ? <h1>Ooops not good!</h1>\r\n            : <div> {this.props.children} </div>;\r\n    }\r\n}\r\n","export  const robots =[\r\n    {\r\n        id:1,\r\n        name:'imam',\r\n        username:'Imam',\r\n        email:'imam@gmail.com'\r\n    },\r\n    {\r\n        id:2,\r\n        name:'boy',\r\n        username:'Boy',\r\n        email:'boy@gmail.com'\r\n    },\r\n    {\r\n        id:3,\r\n        name:'fritz',\r\n        username:'Fritz',\r\n        email:'email@gmail.com'\r\n    },\r\n    {\r\n        id:4,\r\n        name:'alif',\r\n        username:'Alif',\r\n        email:'alif@gmail.com'\r\n    },\r\n    {\r\n        id:5,\r\n        name:'mirza',\r\n        username:'Mirza',\r\n        email:'mirza@gmail.com'\r\n    },\r\n    {\r\n        id:6,\r\n        name:'daffa',\r\n        username:'Daffa',\r\n        email:'daffa@gmail.com'\r\n    },\r\n    {\r\n        id:7,\r\n        name:'fifah',\r\n        username:'Fifah',\r\n        email:'fifah@gmail.com'\r\n    },\r\n    {\r\n        id:8,\r\n        name:'rizal',\r\n        username:'Rizal',\r\n        email:'rizal@gmail.com'\r\n    },\r\n    {\r\n        id:9,\r\n        name:'bima',\r\n        username:'Bima',\r\n        email:'bima@gmail.com'\r\n    },\r\n    {\r\n        id:10,\r\n        name:'Nai',\r\n        username:'nai',\r\n        email:'nai@gmail.com'\r\n    },\r\n    {\r\n        id:11,\r\n        name:'aqsha',\r\n        username:'Aqsha',\r\n        email:'aqsha@gmail.com'\r\n    },\r\n]","import React, { Component } from 'react'\r\nimport CardList from '../components/CardList'\r\nimport SearchBox from '../components/SearchBox'\r\nimport Scroll   from '../components/Scroll'\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\nimport {robots} from '../robots'\r\n\r\nexport default class App extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            search: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(res=>res.json())\r\n            .then(data=>{this.setState({robots: data})})\r\n            .catch(err=>{\r\n                console.log(err)\r\n                this.setState({robots:robots})\r\n            })\r\n    }\r\n\r\n    SearchBoxChange = event =>{\r\n         this.setState({search: event.target.value})\r\n    }\r\n\r\n\r\n    render() {\r\n        const {robots,search} = this.state;\r\n        const filteredRobots = robots.filter(robot=>\r\n             robot.name.toLowerCase().includes(search.toLowerCase()))\r\n        return (\r\n            <div className=\"tc\">\r\n                <h1 className=\"f1\">Robofriends</h1>\r\n                <SearchBox  searchBoxChange={this.SearchBoxChange}/>\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <CardList robots={filteredRobots} />\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n            </div>  \r\n        )\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containters/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}